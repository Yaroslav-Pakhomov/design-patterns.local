Итератор
Iterator

Итератор - поведенческий шаблон проектирования, позволяющий перебрать коллекцию в определенной последовательности, само собой не используя для этого действия при этом сам класс коллекции.

Самый простой пример итератора в PHP - конструкция foreach() в связке с массивом. Пятисекундка PHP: в языке есть возможность сделать доступным для foreach() любой объект, реализуя в нем интерфейс Traversable (а вернее его потомков), при этом стандартный массив в PHP не реализует, какого то черта, Traversable.

Стоит отметить, что шаблон Итератор подразумевает не только обычный обход всех элементов составного объекта по порядку. Реализовав итераторы самостоятельно - можно, например, совершать обход графов и деревьев со сложной последовательностью.

Пример разберём не на обходе красно-черного дерева, на упрощенном варианте самописного Iterator.

1. Нам потребуется интерфейс нашего итератора IMyIterator.

2. В конкретном итераторе SimpleIterator, нам потребуется реализовать метод получения текущего положения итератора, проверку - есть ли следующий элемент и переход к следующему элементу.

3. Раз уж мы пишем собственный итератор, то реализуем и специальную коллекцию MyCollection для него, в которую включен фабричный метод для получения итератора по ней.

4. Проверяем, как это все работает.

p.s. - еще можно реализовать метод типа rewind() (перемотка) и что-то сделать с возвращением "No next item."