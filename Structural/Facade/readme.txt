Фасад
Facade

Фасад - структурный шаблон проектирования, позволяющий управлять сложным поведением объектов через простой интерфейс, пускай и с урезанным функционалом.

Очередной раз разберем шаблон на примере автомобиля! В этот раз задумка такая: класс двигателя (CarEngine) обладает свойствами, в которых указан его тип (type), а так же флаги того включены ли необходимые для запуска топливный насос (isFuelPumpOn) и катушки зажигания (isSparkles). Класс двигателя обладаем методами turnFuelPumpOn() и makeSparkles() для этих целей. Метод start() принимает в виде аргумента объект класса CarElectronics, который и включает системы жизнеобеспечения двигателя, приняв объект двигателя в виде аргумента метода prepareEngineStart(). Само собой, с неработающими топливным насосом и катушками никакой двигатель не заведется (опустим подробности про дизельный мотор).

1. Создадим класс CarEngine.

2. Затем класс CarElectronics.

3. Помимо всего прочего, можно бы было агрегировать двигатель в электронику и наоборот, но пример не об этом, так что потерпим. Фасадом же будет выступать класс CarFacade, в конструктор которого можно передать как уже ранее созданные двигатель с электроникой нужного нам типа, так и оставить список аргумента пустым и вместе с автомобилем создадутся стандартные мотор и электрика.

4. В итоге мы получаем то что хотели: вызовом всего одного метода startTheCar() мы запускаем все процессы необходимые для старта двигателя.


Ещё пример (папка «Computer»):

Как включить компьютер? Все мы привыкли, что достаточно нажать одну кнопку и не задумываться, что при этом происходит на самом деле. Как и простое включение компьютера, Facade паттерн позволяет использовать максимально простой интерфейс для доступа к библиотеке, системе классов или фреймворки.

1. Создадим класс «Computer».

2. Расположен фасад «ComputerFacade».

3. Используем фасад.
