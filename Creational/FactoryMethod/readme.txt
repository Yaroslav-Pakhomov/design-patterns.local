Фабричный метод
Factory Method

Фабричный метод - порождающий шаблон проектирования, сутью которого является предоставить возможность потомкам класса каждому по-своему реализовывать метод, создающий какой-либо объект (не обязательно в методе создавать объект, возможно добыть его из базы, из другого объекта).

1. Рассмотрим на примере типографии: Объявим интерфейс IPrinter, содержащий метод print().

2. Так же 2 класса принтеров, реализующие этот интерфейс: черно-белый и цветной принтер, реализующие метод print() соответственно. Черно-белый печатает черно-белое изображение, а цветной - цветное.
Цветной принтер: ColorPrinter. Черно-белый: MonochromePrinter.

3. Объявим абстрактный класс AbstractTypographerFactory, содержащий абстрактный метод preparePrinter(), который его потомки реализуют каждый по своему: специалист по черно-белой печати подготовит черно-белый принтер, а по цветной - цветной. Так же, добавим публичный метод printImage(), в котором печатник подготовит принтер и напечатает изображение, можно добавлять и другие методы на своё усмотрение.

4. И, собственно, нам будут необходимы 2 вида специалистов: специалист по цветному принтеру - ColorTypographerFactory, специалист по черно-белому принтеру - MonochromeTypographerFactory.

5. Протестируем работу в файле clientCode.php. Предположим, исходя из простоты примера, что каждый из специалиста сам знает что ему нужно напечатать. Создадим массив и добавим в него специалистов. Переберем полиграфистов в цикле, чтобы они выполнили свою работу.




Ещё пример:

Данный паттерн является основой фабрики. В действительности при создании программы в первую очередь создается фабричный метод, а на его основе уже создаются фабрики.

Допустим фабрика производит пакеты с разными соками. Мы можем на каждый вид сока сделать свою производственную линию, но это не эффективно. Удобнее сделать одну линию по производству пакетов-основ, а разделение ввести только на этапе заливки сока, который мы можем определять просто по названию сока.

Для этого мы создаем основной отдел по производству пакетов-основ и предупреждаем все подотделы, что они должны производить нужный пакет с соком по-простому «Надо» (т.е. каждый подотдел должен реализовать паттерн «фабричный метод»). Поэтому каждый подотдел заведует только своим типом сока и реагирует на слово «Надо».

Теперь, если нам потребуется пакет бананового сока, мы просто скажем отделу по производству бананового сока «Надо», а он в свою очередь скажет основному отделу по созданию пакетов сока: «Произведи свой обычный пакет, а этот сок нужно туда залить».
