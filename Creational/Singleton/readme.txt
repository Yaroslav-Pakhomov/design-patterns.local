Одиночка
Singleton

Одиночка - порождающий шаблон проектирования, реализация которого позволяет добиться того, чтобы у вас был только один экземпляр класса. То есть не больше одного объекта класса, вне зависимости от того сколько вы (или не вы) их создадите.

Паттерн не сложный, очень популярный на примерах и, если вы интересуетесь паттернами (да и если не интересуетесь), скорее всего первым о, чем вы услышите, будет синглтон. Однако, шаблон несколько хитрее, чем кажется на первый взгляд. Именно при изучении его можно столкнуться с тем, чем на самом деле отличается реализация self от static в ООП PHP (при реализации паттерна ситуация хоть и проясняется, но знания могут не закрепиться в достаточной степени).

Self — класс в котором написано. Static — класс в котором выполнилось. Например, если вызвать унаследованный метод в котором self/static, то каждый вариант даст разный результат.

Таким образом, Singleton м.б. Паттерном, благодаря которому можно устранить фундаментальные провалы в знаниях.

1. Создадим пример синглтона Singleton.

2. И его потомка с одним измененным методом для демонстрации SingletonChild.

3. Теперь запустим код, создав синглтон и его потомка с помощью метода getInstance(), который позволяет потомкам создавать свой экземпляр (файл clientCode). Очистим переменные и создадим одиночек уже с помощью метода getSingleInstance()


Стоит отдельно подчеркнуть то, что оба метода getSingleInstance() и getInstance() реализованы в классе исключительно для примера! В реальной жизни так делать не нужно, выбирайте один из способов реализации. В случае с одиночкой без наследования будет разумно даже зафиналить класс (final).
